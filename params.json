{
  "name": "Yet another angular html5 drag drop",
  "tagline": "Drag drop sort directive for angular",
  "body": "#**yet-another-angular-html5-drag-drop**\r\n\r\n[**See live demos**](#live-demos)  \r\nAngular directive to enable drag and drop features on ng-repeat collections.  \r\nImplemented using the HTML5 draggable api, javascript and angularJS.  \r\nNo dependency on jQuery.\r\n\r\n##Features\r\n\r\n* Move, Copy and Replace drag and drop actions.\r\n* Simple to use and set up with a single directive.\r\n* Powerful options offer advanced control.\r\n* Default callbacks that automatically update the dom and underlying model(s).\r\n* User definable callbacks that work in tandem with or override default callbacks.\r\n* Supports \r\n\t* Various html elements\r\n\t* Static sibling html elements\r\n\t* Drag handles\r\n\t* Multiple collections\r\n\t* Nested collections\r\n\t* Shared or isolated scopes, across different controllers even modules\r\n* Styling\r\n\t* Placeholder\r\n\t* Drop target\r\n\t* Drag source\r\n\t* Dragging element\r\n\r\n##Live Demos\r\n\r\n* [Simple List](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/simplelist.html)\r\n* [Styled List](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/stylelist.html)\r\n* [Static Items in List](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/staticlist.html)\r\n* [Mulitple Lists](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/multilist.html)\r\n* [Nested Lists](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/nestedlist.html)\r\n* [Advanced Demo](https://bwsoftinc.github.io/yet-another-angular-html5-drag-drop/demo/demo.html)\r\n\r\n##Using the `yaHTML5Sort` module and `ya-sort` directive\r\n\r\nTo use drag drop features, download yaHTML5Sort.js and add `yaHTML5Sort` module as a dependency in your angular module.\r\n```Javascript\r\n var module = angular.module('myModule', ['yaHTML5Sort']);\r\n```\r\n\r\nOn the element containing the ng-repeat directive, add the `ya-sort` directive\r\n```html\r\n<div ng-repeat=\"item in items\" ya-sort>\r\n```\r\n\r\nSupply options by adding a value to the `ya-sort` directive\r\n```html\r\n<div ng-repeat=\"item in items\" ya-sort=\"myOptions\">\r\n```\r\n\r\n##The options parameter (optional)\r\n\r\nDeclare one or more options objects on the angular controller's scope.  \r\nThese options objects can be passed as the `ya-sort` directive value to one or more instances of `ya-sort`\r\n```Javascript\r\nmodule.controller('myController', function($scope) {\r\n\t$scope.myOptions = {\r\n\t\tdragHandleClass = 'handle',\r\n\t\t//more options...\r\n\t};\r\n});\r\n```\r\n\r\n###Define one or more of these property values, if not defined the default will be used\r\n\r\n| Option Values        | Type\t | Default | Description\r\n| ---------------------|---------|---------|--------------------------------------------------------|\r\n| disabled             | boolean | false   | Whether `ya-sort` directive features are disabled      |\r\n| dragHandleClass      | string  | null    | A class used to denote the items' drag handles         |\r\n| dragSourceItemClass  | string  | null    | A class applied to the original item while dragging    |\r\n| dragItemClass        | string  | null    | A class applied to the dragging item while dragging    |\r\n| dropPlaceholderClass | string  | null    | A class applied to the drop placeholder while dragging |\r\n| dropTargetItemClass  | string  | null    | A class applied to the drop target while dragging      |\r\n\r\n###Define one or more of these callback function prototypes\r\n\r\n####`candrag(item)` triggered ondragstart event\r\n\r\n| Parameter    | Type    | Description                                            |\r\n|--------------|---------|--------------------------------------------------------|\r\n| item         | object  | The object model of the item attempting to be dragged  |\r\n| return       | boolean | Whether dragging should commence for this item         |\r\n\r\nRemarks\r\n* If not defined dragging will be allowed on any `ya-sort` item.\r\n\r\n####`candrop(item, sourceArray, targetArray)` triggered ondragover event\r\n\r\n| Parameter    | Type    | Description                                            |\r\n|--------------|---------|--------------------------------------------------------|\r\n| item         | object  | The object model of the item being dragged             |\r\n| sourceArray  | array   | The array model that contains `item`                   |\r\n| targetArray  | array   | The array model where `item` would be dropped          |\r\n| return       | boolean | Whether the drop should be allowed here                |\r\n\r\nRemarks\r\n* If not defined dropping will be allowed in any `ya-sort` instance.\r\n\t\r\n####`onmove(item, sourceArray, targetIndex, targetArray)` triggered ondrop event\r\n\r\n| Parameter    | Type    | Description                                            |\r\n|--------------|---------|--------------------------------------------------------|\r\n| item         | object  | The object model of the item being dropped             |\r\n| sourceArray  | array   | The array model that contains `item`                   |\r\n| targetIndex  | int     | The index in `targetArray` where move is being placed  |\r\n| targetArray  | array   | The array model where `item` is being dropped          |\r\n| return       | boolean | Whether default action was handled                     |\r\n\r\nRemarks\r\n* Default action is removing `item` from `sourceArray` and inserting to `targetArray` at `targetIndex`.\r\n* Define `onmove` to perform additional actions such as calling a webapi and updating `item` properties or other item properties in the arrays.\r\n* Javascript function parameters are not by reference so update `item`'s properties freely, assigning `item` to another object in `onmove` will not work.\r\n* Return false to then proceed with the default action.\r\n* If the default action is undesirable then return true signaling the default action was handled in user code.\r\n\r\n####`oncopy(item, sourceArray, targetIndex, targetArray)` triggered ondrop event\r\n\r\n| Parameter    | Type    | Description                                            |\r\n|--------------|---------|--------------------------------------------------------|\r\n| item         | object  | A copy of the object model of the item being dropped   |\r\n| sourceArray  | array   | The array model that contains the original `item`      |\r\n| targetIndex  | int     | The index in `targetArray` where copy is being placed  |\r\n| targetArray  | array   | The array model where `item` is being dropped          |\r\n| return       | boolean | Whether default action was handled                     |\r\n\r\nRemarks\r\n* Defining the `oncopy` function enables the copy (_control+drag_) feature.\r\n* Here, `item` is already a copy so properties can be updated and will only affect the target and not the original.\r\n* Default action is inserting the copy of `item` into `targetArray` at `targetIndex`.\r\n* When both `oncopy` and `onreplace` functions are defined and the user action (_control+shift+drag_) makes use of both features, then both `oncopy` and `onreplace` callbacks will be triggered with `oncopy` being first.\r\n\r\n####`onreplace(item, sourceArray, targetIndex, targetArray)` triggered ondrop event\r\n\r\n| Parameter    | Type    | Description                                            |\r\n|--------------|---------|--------------------------------------------------------|\r\n| item         | object  | The object model of the item being dropped             |\r\n| sourceArray  | array   | The array model that contains `item`                   |\r\n| targetIndex  | int     | The index in `targetArray` where replace is being made |\r\n| targetArray  | array   | The array model where `item` is being dropped          |\r\n| return       | boolean | Whether default action was handled                     |\r\n\r\nRemarks\r\n* Defining the `onreplace` function enables the replace (_shift+drag_) feature.\r\n* Default action is removing `item` from `sourceArray`, removing the target item at `targetIndex` from `targetArray` and inserting `item` into `targetArray` at `targetIndex`.\r\n* When both `oncopy` and `onreplace` functions are defined and the user action (_control+shift+drag_) makes use of both features, then the default action will not remove `item` from `sourceArray`.\r\n\r\n##License\r\n\r\nCopyright (c) 2016 Brian Waplington\r\n\r\nCopyright (c) 2016 BW Soft, Inc.\r\n\r\n[MIT License](https://raw.githubusercontent.com/bwsoftinc/yet-another-angular-html5-drag-drop/master/LICENSE)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}